import 'dart:async';
import 'dart:convert';

import 'package:dev_hcmus/screen/remote.dart';
import 'package:dev_hcmus/server/tcp_server.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'remote_screen.dart';
import 'package:network_info_plus/network_info_plus.dart';
import 'package:http/http.dart' as http;

import 'package:wifi_iot/wifi_iot.dart';

class MyHomePage extends StatefulWidget {
  MyHomePage();
  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

String _dropdownValue = 'Chưa chọn';
String strNull = 'Chưa chọn';
List<String> listDevice = ['Chưa chọn'];
String getIP(String str, int i) {
  int count = 0;
  String res = "";
  for (int j = 0; j < str.length; j++) {
    res = res + str[j];
    if (str[j] == '.') {
      count++;
    }
    if (count >= 3) {
      return res + i.toString();
    }
  }
  return "";
}

Future<List<APClient>> getClientList(
    bool onlyReachables, int reachableTimeout) async {
  List<APClient> htResultClient;

  try {
    htResultClient =
        await WiFiForIoTPlugin.getClientList(onlyReachables, reachableTimeout);
  } on PlatformException {
    htResultClient = <APClient>[];
  }

  return htResultClient;
}

Future<List<String>> getList() async {
  List<String> res = ['Chưa chọn'];
  final info = NetworkInfo();
  var wifiGateway = await info.getWifiGatewayIP();
  if (wifiGateway == '192.168.4.1') {
    res.add(wifiGateway.toString());
  } else {
    var val = await getClientList(false, 200);
    for (int i = 0; i < val.length; i++) {
      try {
        var url = Uri.parse('http://' + val[i].ipAddr.toString() + '/ping');
        var response = await http.get(url).timeout(const Duration(seconds: 4),
            onTimeout: () {
          throw TimeoutException(
              'The connection has timed out, Please try again!');
        });

        if (response.statusCode == 200) {
          try {
            Map<String, dynamic> user = jsonDecode(response.body);
            if (user['name'] != null) {
              res.add(val[i].ipAddr.toString());
            }
          } on Exception catch (_) {
            print('never reached');
          }
        }
      } on Exception catch (_) {
        print('never reached');
      }
    }
  }
  return res;
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  void initState() {
    super.initState();

    Future.delayed(Duration.zero, () async {
      setState(() {
        loadingWifi = true;
      });

      List<String> newList = await getList();
      setState(() {
        listDevice = newList;
        loadingWifi = false;
      });
    });
  }

  bool loading = false;
  bool loadingWifi = false;
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SingleChildScrollView(
        child: Container(
          height: MediaQuery.of(context).size.height,
          child: Center(
              child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Container(
                padding: EdgeInsets.all(20),
                child: Text(
                  "DEVsmart",
                  style: TextStyle(
                    fontSize: 25,
                    fontWeight: FontWeight.w800,
                  ),
                ),
              ),
              Container(
                alignment: Alignment.center,
                margin: EdgeInsets.symmetric(horizontal: 50),
                child: Material(
                  elevation: 10,
                  shadowColor: Colors.grey[100],
                  type: MaterialType.card,
                  shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(33)),
                  child: Container(
                      child: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                        Container(
                          padding: EdgeInsets.only(right: 4),
                          child: FloatingActionButton(
                            backgroundColor: Colors.white,
                            heroTag: "_MAIN_FAB_0",
                            mini: true,
                            elevation: 0,
                            onPressed: () async {
                              if (loadingWifi == false) {
                                setState(() {
                                  loadingWifi = true;
                                });

                                List<String> newList = await getList();
                                setState(() {
                                  listDevice = newList;
                                  loadingWifi = false;
                                });
                              }
                            },
                            child: loadingWifi
                                ? CircularProgressIndicator(
                                    valueColor: AlwaysStoppedAnimation<Color>(
                                        Colors.black),
                                    strokeWidth: 2,
                                  )
                                : Icon(
                                    Icons.wifi,
                                    color: Colors.blue,
                                  ),
                          ),
                        ),
                        DropdownButton<String>(
                          value: _dropdownValue,
                          iconSize: 24,
                          elevation: 16,
                          style: const TextStyle(color: Colors.deepPurple),
                          underline: Container(
                            height: 2,
                            color: Colors.white,
                          ),
                          onChanged: (String? newValue) {
                            setState(() {
                              _dropdownValue = newValue!;
                            });
                          },
                          items: listDevice
                              .map<DropdownMenuItem<String>>((String value) {
                            return DropdownMenuItem<String>(
                              value: value,
                              child: Text(value),
                            );
                          }).toList(),
                        ),
                        _dropdownValue != strNull
                            ? Container(
                                padding: EdgeInsets.only(right: 4),
                                child: FloatingActionButton(
                                  backgroundColor: Colors.blue,
                                  heroTag: "_MAIN_FAB_1",
                                  mini: true,
                                  elevation: 0,
                                  onPressed: () async {
                                    loading = true;

                                    Navigator.push(
                                        context,
                                        MaterialPageRoute(
                                          builder: (context) =>
                                              RemotePage1(_dropdownValue),
                                        ));
                                    loading = false;
                                  },
                                  child: loading
                                      ? CircularProgressIndicator(
                                          valueColor:
                                              AlwaysStoppedAnimation<Color>(
                                                  Colors.white),
                                          strokeWidth: 2,
                                        )
                                      : Icon(Icons.arrow_forward),
                                ),
                              )
                            : Container(
                                padding: EdgeInsets.only(right: 4),
                                child: FloatingActionButton(
                                  backgroundColor: Colors.grey,
                                  heroTag: "_MAIN_FAB_1",
                                  mini: true,
                                  elevation: 0,
                                  onPressed: () {},
                                  child: Icon(Icons.arrow_forward),
                                ),
                              ),
                      ])),
                ),
              ),
            ],
          )),
        ),
      ),
    );
  }
}
